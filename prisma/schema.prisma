// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TradeType {
  BUY   @map("B")
  SELL  @map("S")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  accounts      Account[]
  trades        Trade[]
  matches       TradeMatch[]

  @@map("users")
}

model Account {
  id       String              @id @default(cuid())
  userId   String
  name     String
  feeRate  Float               // 현재 수수료율
  isDefault Boolean @default(false) // 기본 계좌 여부

  user     User                @relation(fields: [userId], references: [id])
  trades    Trade[]
}

// 환전에 대한 내용.
// model Exchange {
//   id       String              @id @default(cuid())
//   code     String              // 예: NYSE, KOSPI 등
//   name     String
//   country  String
//   currency String              // 예: USD, KRW 등

//   stocks   Stock[]
// }

model Stock {
  ticker     String    @id @db.VarChar(6)     // 주식 티커
  name       String
  market     String
  // exchangeId String

  // exchange   Exchange  @relation(fields: [exchangeId], references: [id])
  trades    Trade[]
  matches   TradeMatch[]
  // userStockSettings  UserStockSetting[]
}

model Trade {
  id                String         @id @default(cuid())
  userId            String
  accountId         String
  stockTicker       String
  type              TradeType
  tradeAt           DateTime
  quantity          Int
  price             Float
  isMatched         Boolean @default(false)

  feeAmount         Float          // 거래 당시 수수료
  taxAmount         Float          // 거래 당시 세금
  feeRate           Float          // 거래 당시 수수료율
  taxRate           Float          // 거래 당시 세율
  
  createdAt         DateTime       @default(now())

  user      User      @relation(fields: [userId], references: [id])
  account   Account   @relation(fields: [accountId], references: [id])
  stock     Stock     @relation(fields: [stockTicker], references: [ticker])

  buyMatches     TradeMatch[]   @relation("BuyTrades")
  sellMatches    TradeMatch[]   @relation("SellTrades")

  @@map("trades")
}

model TradeMatch {
  id                String         @id @default(cuid())
  userId            String
  stockTicker       String
  buyTradeId        String
  sellTradeId       String
  profit            Float          // 발생 수익
  netProfit         Float          // 순수익 (예: profit - 세금/수수료 등)
  fee               Float          // 매칭 시 발생한 수수료
  tax               Float          // 매칭 시 발생한 세금
  feeRate           Float          // 매칭 당시 수수료율
  taxRate           Float          // 매칭 당시 세율
  createdAt         DateTime       @default(now())

  user             User              @relation(fields: [userId], references: [id])
  buyTrade          Trade  @relation("BuyTrades", fields: [buyTradeId], references: [id])
  sellTrade         Trade  @relation("SellTrades", fields: [sellTradeId], references: [id])
  stock            Stock             @relation(fields: [stockTicker], references: [ticker])

  @@map("trade_matches")
}
